"use strict";angular.module("sayonaraAdminApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","ngMaterial","angular-loading-bar","ngQuill","hc.marked","ui.codemirror","sayonaraAuth","sayonaraPages","sayonaraEntries","sayonaraEntryType","sayonaraCategory","sayonaraAdmin"]).config(["$routeProvider","$locationProvider","$mdThemingProvider","ngQuillConfigProvider","markedProvider",function(a,b,c,d,e){b.hashPrefix(""),c.theme("default").primaryPalette("indigo").accentPalette("indigo").warnPalette("red").backgroundPalette("grey");var f=[["bold","italic","underline","strike"],["blockquote","code-block"],[{header:1},{header:2}],[{list:"ordered"},{list:"bullet"}],[{script:"sub"},{script:"super"}],[{indent:"-1"},{indent:"+1"}],[{direction:"rtl"}],[{size:["small",!1,"large","huge"]}],[{header:[1,2,3,4,5,6,!1]}],[{color:[]},{background:[]}],[{font:[]}],[{align:[]}],["clean"],["link","image","video"]];d.set({toolbar:{container:f,handlers:{image:function(){var a=this.quill.getSelection(),b=prompt("Please enter the image URL");return!b||b.length<=0?!0:void this.quill.insertEmbed(a.index,"image",b,Quill.sources.USER)}}},syntax:!0},null,"Sayonara Editor"),e.setOptions({gfm:!0,tables:!0,breaks:!0,highlight:function(a,b){return b?hljs.highlight(b,a,!0).value:hljs.highlightAuto(a).value}}),a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main"}).when("/login",{templateUrl:"views/login.html",controller:"LoginCtrl",controllerAs:"login"}).when("/allpages",{templateUrl:"views/allpages.html",controller:"AllpagesCtrl",controllerAs:"allPages"}).when("/page/edit",{templateUrl:"views/pageedit.html",controller:"PageeditCtrl",controllerAs:"pageEdit"}).when("/allentries",{templateUrl:"views/allentries.html",controller:"AllentriesCtrl",controllerAs:"allEntries"}).when("/entry/edit",{templateUrl:"views/entryedit.html",controller:"EntryeditCtrl",controllerAs:"entryEdit"}).when("/settings",{templateUrl:"views/settings.html",controller:"SettingsCtrl",controllerAs:"settings"}).when("/admin",{templateUrl:"views/admin.html",controller:"AdminCtrl",controllerAs:"admin"}).when("/admin/users",{templateUrl:"views/editusers.html",controller:"EditusersCtrl",controllerAs:"editusers"}).when("/admin/sayonaraconfig",{templateUrl:"views/sayonaraconfig.html",controller:"SayonaraconfigCtrl",controllerAs:"sayonaraConfig"}).otherwise({redirectTo:"/"})}]),angular.module("sayonaraAdminApp").controller("MainCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("sayonaraAdminApp").directive("navBar",["$location","$mdSidenav","sayonaraAuthService",function(a,b,c){return{templateUrl:"views/templates/navbar.html",restrict:"E",link:function(d,e,f){function g(a){return function(){b(a).toggle()}}var h=function(){var b=a.path();"/"==b?d.currentNavItem="home":b.includes("page")?d.currentNavItem="pages":b.includes("entry")||b.includes("allentries")?d.currentNavItem="entries":b.includes("settings")?d.currentNavItem="settings":b.includes("admin")||b.includes("users")?d.currentNavItem="admin":d.currentNavItem=""};h(),d.$on("$routeChangeSuccess",function(a,b,c){h()}),d.isLoggedIn=function(){return c.isLoggedIn("/login")},d.getPermissions=function(){return c.getUser()},d.logout=function(){c.logout()},d.toggleSideNav=g("left"),d.isMobile=function(){var a=window.matchMedia("(max-width: 767px)");return a.matches}}}}]),angular.module("sayonaraAdminApp").controller("LoginCtrl",["$scope","$location","adminNotify","sayonaraAuthService",function(a,b,c,d){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"],d.isLoggedIn()&&b.path("/"),a.email="",a.password="",a.submitLogin=function(){d.loginUser(a.email,a.password).then(function(a){d.saveUser(a),c.showAlert("Welcome Back!"),b.path("/")},function(a){c.error(a,[{status:401,text:"Incorrect Password."},{status:404,text:"E-mail not found."}])})}}]),angular.module("sayonaraAdminApp").service("adminNotify",["$mdToast","$location","sayonaraAuthService",function(a,b,c){var d=function(b,c){a.show(a.simple().textContent(b).toastClass("appToast").position("top right")),c&&c()};return{showAlert:function(a,b){d(a,b)},error:function(a,b){var e=-1;if(b)for(var f=0;f<b.length;f++)a.status==b[f].status&&(e=a.status,b[f].callback?d(b[f].text,b[f].callback(a)):d(b[f].text));0>e&&(401==a.status?(d("Authentication error. Please log back in!"),c.logout()):402==a.status||d(404==a.status?"Not Found, Something could not be found. Please contact your developers, or try again":-1==a.status?"No Connection, Internet Connection is required to use this app. Please connect to the internet with your device, and restart the app.":500==a.status?"Server Error, Your connection may be bad, or the server is being problematic. Please contact your developer, or try again later.":"Error Status: "+a.status+", Unexpected Error. Please re-open the app, or try again later!"))}}}]),angular.module("sayonaraAdminApp").controller("AllpagesCtrl",["$scope","$location","adminNotify","sayonaraPageService",function(a,b,c,d){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"],a.pages=[],d.getAllPages().then(function(b){b.forEach(function(a){a.date=moment(a.date).fromNow()}),a.pages=b},function(a){c.error(a)}),a.goToPage=function(a){a?b.path("/page/edit").search("id",a):b.path("/page/edit")}}]),angular.module("sayonaraAdminApp").controller("PageeditCtrl",["$scope","$routeParams","$location","adminNotify","sayonaraPageService","sayonaraAdminService",function(a,b,c,d,e,f){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"],a.page={},b.id?(a.urlId=b.id,e.getPageById(b.id).then(function(b){a.page=b},function(a){d.error(a)})):(a.page.title="New Sayonara Page",a.page.order=0),a.entryTypes=[],a.categories=[],f.getSettings().then(function(b){a.entryTypes=b.entryTypes,a.categories=b.categories},function(a){d.error(a)}),a.savePage=function(){b.id?g(b.id):h()};var g=function(b){var c={title:a.page.title,content:a.page.content,order:a.page.order,entryTypes:a.page.entryTypes,categories:a.page.categories};e.updatePageById(b,c).then(function(a){d.showAlert("Page Updated Successfully!")},function(a){d.error(a)})},h=function(){var b={title:a.page.title,content:a.page.content,order:a.page.order,entryTypes:a.page.entryTypes||[],categories:a.page.categories||[]};e.createPage(b).then(function(a){d.showAlert("Page Created Successfully!"),c.path("/allpages")},function(a){d.error(a)})};a.deletePage=function(){e.deletePageById(b.id).then(function(a){d.showAlert("Page Deleted Successfully!"),c.path("/allpages")},function(a){d.error(a)})}}]),angular.module("sayonaraAdminApp").directive("sayonaraContent",["marked",function(a){return{templateUrl:"views/templates/sayonaracontent.html",restrict:"E",scope:{ngModel:"="},link:function(b,c,d){b.markdown="",b.codeEditorOptions={lineWrapping:!0,lineNumbers:!0,mode:"gfm"},b.htmlToMarkdown=function(){b.markdown=toMarkdown(b.ngModel,{gfm:!0,converters:[{filter:"code",replacement:function(a){return"````\n"+a+"\n````"}},{filter:function(a){return a.nodeName&&a.hasAttribute("ng-non-bindable")?!0:!1},replacement:function(a,b){return 0==a.length?"````\n"+a+"````":"`"+a.substring(0,a.length-5)+"\n````"}}]})},b.markdownToHtml=function(){b.ngModel=a(b.markdown)}}}}]),angular.module("sayonaraAdminApp").controller("AllentriesCtrl",["$scope","$location","adminNotify","sayonaraEntryTypeService",function(a,b,c,d){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"],a.entryTypes=[],d.getAllEntryTypes(!0).then(function(b){b.forEach(function(a){a.entries.forEach(function(a){a.date=moment(a.date).fromNow()})}),a.entryTypes=b},function(a){c.error(a)}),a.goToEntry=function(a){a?b.path("/entry/edit").search("id",a):b.path("/entry/edit")}}]),angular.module("sayonaraAdminApp").controller("EntryeditCtrl",["$scope","$routeParams","$location","adminNotify","sayonaraEntryService","sayonaraAdminService",function(a,b,c,d,e,f){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"],a.entry={},b.id?(a.urlId=b.id,e.getEntryById(b.id).then(function(b){a.entry=b},function(a){d.error(a)})):(a.entry.title="New Sayonara Entry",a.entry.order=0),a.entryTypes=[],a.categories=[],f.getSettings().then(function(c){a.entryTypes=c.entryTypes,a.categories=c.categories,!b.id&&a.entryTypes.length>0&&(a.entry.entryType=a.entryTypes[0]._id)},function(a){d.error(a)}),a.saveEntry=function(){b.id?g(b.id):h()};var g=function(b){var c={title:a.entry.title,content:a.entry.content,order:a.entry.order,entryType:a.entry.entryType,categories:a.entry.categories||[]};e.updateEntryById(b,c).then(function(a){d.showAlert("Entry Updated Successfully!")},function(a){d.error(a)})},h=function(){var b={title:a.entry.title,content:a.entry.content,order:a.entry.order,entryType:a.entry.entryType,categories:a.entry.categories||[]};e.createEntry(b).then(function(a){d.showAlert("Entry Created Successfully!"),c.path("/allentries")},function(a){d.error(a)})};a.deleteEntry=function(){e.deleteEntryById(b.id).then(function(a){d.showAlert("Entry Deleted Successfully!"),c.path("/allentries")},function(a){d.error(a)})}}]),angular.module("sayonaraAdminApp").directive("sayonaraSelector",["$timeout",function(a){return{templateUrl:"views/templates/sayonaraselector.html",restrict:"E",scope:{selectedItems:"=",options:"<",selectorLabel:"@",multipleSelection:"<?",onSelect:"&?"},link:function(b,c,d){b.selectionSearch="",b.itemClicked=function(c){b.multipleSelection||(b.selectionSearch=""),a(function(){b.onSelect&&b.onSelect({selection:c})},0)}}}}]),angular.module("sayonaraAdminApp").controller("SettingsCtrl",["$scope","adminNotify","sayonaraEntryTypeService","sayonaraCategoryService","sayonaraAdminService",function(a,b,c,d,e){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"],a.showList={entryTypes:!1,categories:!1},a.entryTypes=[],a.categories=[],e.getSettings().then(function(b){a.entryTypes=b.entryTypes,a.categories=b.categories},function(a){b.error(a)}),a.createEntryType=function(){var d={title:"New Sayonara Entry Type",order:0,hasContent:!0};c.createEntryType(d).then(function(c){a.entryTypes.push(c),b.showAlert("Created a new Entry Type!")},function(a){b.error(a)})},a.createCategory=function(){var c={title:"New Sayonara Category",hasContent:!0};d.createCategory(c).then(function(c){a.categories.push(c),b.showAlert("Created a new Category!")},function(a){b.error(a)})},a.saveEntryType=function(a){var d=Object.assign({},a);delete d._id,delete d.entries,c.updateEntryTypeById(a._id,d).then(function(a){b.showAlert("Saved the entry type!")},function(a){b.error(a)})},a.saveCategory=function(a){var c=Object.assign({},a);delete c._id,d.updateCategoryById(a._id,c).then(function(a){b.showAlert("Saved the category!")},function(a){b.error(a)})},a.deleteEntryType=function(d){a.entryTypes[d]&&a.entryTypes[d]._id&&c.deleteEntryTypeById(a.entryTypes[d]._id).then(function(c){a.entryTypes.splice(d,1),b.showAlert("Deleted the entry type!")},function(a){b.error(a)})},a.deleteCategory=function(c){a.categories[c]&&a.categories[c]._id&&d.deleteCategoryById(a.categories[c]._id).then(function(d){a.categories.splice(c,1),b.showAlert("Deleted the category!")},function(a){b.error(a)})}}]),angular.module("sayonaraAdminApp").controller("AdminCtrl",function(){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}),angular.module("sayonaraAdminApp").controller("EditusersCtrl",["$scope","adminNotify","sayonaraAuthService",function(a,b,c){this.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"],a.newUser={},a.users=[],a.originalUsers=[],a.showPermissions={},c.getAllUsers().then(function(b){a.users=b,a.originalUsers=angular.copy(a.users)},function(a){b.error(a)}),a.createUser=function(){if(!a.newUser.email||!a.newUser.password||!a.newUser.confirmPassword)return void b.showAlert('You must complete all "New User" fields');if(a.newUser.password!=a.newUser.confirmPassword)return void b.showAlert("The Passwords do not match");var d={email:a.newUser.email,password:a.newUser.password};c.createUser(d).then(function(c){a.newUser={},a.users.push(c.user),a.originalUsers=angular.copy(a.users),b.showAlert("User Created: "+c.user)},function(a){b.error(a,[{status:409,text:"Email Already Exists"}])})},a.updateUser=function(d,e){var f={id:d._id};if(d.email!=a.originalUsers[e].email&&(f.email=d.email),d.currentPassword&&d.newPassword&&d.newPasswordConfirm&&(d.newPassword!=d.newPasswordConfirm&&b.showAlert("New passwords do not match!"),f.password=d.currentPassword,f.newPassword=d.newPassword),!angular.equals(d.permissions,a.originalUsers[e].permissions)){var g=Object.keys(d.permissions);g.splice(g.indexOf("admin"),1);for(var h=0;h<g.length;h++)void 0==d.permissions[g[h]].read||d.permissions[g[h]].read||(d.permissions[g[h]].create=!1,d.permissions[g[h]].update=!1,d.permissions[g[h]]["delete"]=!1);f.permissions=d.permissions}1!=Object.keys(f).length&&c.updateUser(f).then(function(c){delete a.users[e].confirmPassword,delete a.users[e].newPassword,delete a.users[e].newPasswordConfirm,a.originalUsers=angular.copy(a.users),b.showAlert("User successfully updated!")},function(a){b.error(a,[{status:409,text:"Email already taken by another user"},{status:403,text:"Incorrect Password"}])})},a.deleteUser=function(d,e){var f={id:d._id};c.deleteUser(f).then(function(c){a.users.splice(e,1),a.originalUsers=angular.copy(a.users),b.showAlert(d.email+" successfully deleted!")},function(a){b.error(a)})}}]),angular.module("sayonaraAdminApp").controller("SayonaraconfigCtrl",["$scope","adminNotify","sayonaraAdminService",function(a,b,c){a.sayonaraConfig={},a.originalSayonaraConfig={},c.getSayonaraConfig().then(function(b){a.sayonaraConfig=b,a.originalSayonaraConfig=angular.copy(a.sayonaraConfig)},function(a){b.error(a)}),a.updateConfig=function(){if(!angular.equals(a.sayonaraConfig,a.originalSayonaraConfig)){var d=angular.copy(a.sayonaraConfig);c.updateSayonaraConfig(d).then(function(c){a.sayonaraConfig=c,a.originalSayonaraConfig=angular.copy(a.sayonaraConfig),b.showAlert("Sayonara Config Updated! Plese restart Sayonara to see the changes...")},function(a){b.error(a)})}}}]),angular.module("sayonaraAdminApp").run(["$templateCache",function(a){a.put("views/admin.html",' <h1 class="centerText contentHeader">Admin</h1> <div class="centerText elementDescription"> This View shows additional settings meant for Admin users. By being admin user, you should understand basic website administration, or developer operations. Please refer to SayonaraJS Documentation if anything is unclear. <b>BEWARE:</b> with these settings you could potentially and unintentionally decrease the security of your website, or break some its functionality, please proceed with caution. </div>  <div class="center contentContainer">  <md-card class="contentCard"> <md-card-title> <md-card-title-text class="centerText">  <span class="md-headline">Users</span> </md-card-title-text> </md-card-title>  <md-card-content> Create, delete, or edit the information of the User\'s of this website here </md-card-content> <md-card-actions layout="row" layout-align="end center"> <md-button class="md-raised" ng-href="#/admin/users">Edit</md-button> </md-card-actions> </md-card> <md-card class="contentCard"> <md-card-title> <md-card-title-text class="centerText">  <span class="md-headline">Sayonara Config</span> </md-card-title-text> </md-card-title>  <md-card-content> Edit the sayonaraConfig.js. Change Frontend clients, databases, ports, etc... </md-card-content> <md-card-actions layout="row" layout-align="end center"> <md-button class="md-raised" ng-href="#/admin/sayonaraconfig">Edit</md-button> </md-card-actions> </md-card> </div>'),a.put("views/allentries.html",'<h1 class="centerText contentHeader">Entries</h1> <div class="centerText elementDescription"> This view shows all current entries for the website, organized by entry type. You can create a new entry by clicking "New Entry" below. You can edit a entry, by clicking "Edit" on the corresponding entry. </div> <div class="centerText"> <md-button class="center md-raised md-primary" ng-click="goToEntry()">New Entry</md-button> </div>  <div class="center contentContainer" ng-repeat="entryType in entryTypes"> <h2 class="contentTypeTitle" ng-if="entryType.entries.length > 0">{{entryType.title}}</h2> <md-card class="contentCard" ng-repeat="content in entryType.entries"> <md-card-title> <md-card-title-text class="centerText"> <span class="md-headline">{{content.title}}</span> </md-card-title-text> </md-card-title> <md-card-content>  <div class="contentPreviewContainer"> <div class="contentPreview" ng-bind-html="content.content"></div> </div> <p>Order: {{content.order}}</p> <p>Date: {{content.date}}</p> </md-card-content> <md-card-actions layout="row" layout-align="end center"> <md-button class="md-raised" ng-click="goToEntry(content._id)">Edit</md-button> </md-card-actions> </md-card> </div>'),a.put("views/allpages.html",'<h1 class="centerText contentHeader">Pages</h1> <div class="centerText elementDescription"> This view shows all current pages for the website. You can create a new page by clicking "New Page" below. You can edit a page, by clicking "Edit" on the corresponding page. </div> <div class="centerText"> <md-button class="center md-raised md-primary" ng-click="goToPage()">New Page</md-button> </div>  <div class="center contentContainer"> <md-card class="contentCard" ng-repeat="content in pages"> <md-card-title> <md-card-title-text class="centerText"> <span class="md-headline">{{content.title}}</span> </md-card-title-text> </md-card-title> <md-card-content>  <div class="contentPreviewContainer"> <div class="contentPreview" ng-bind-html="content.content"></div> </div> <p>Order: {{content.order}}</p> <p>Date: {{content.date}}</p> </md-card-content> <md-card-actions layout="row" layout-align="end center"> <md-button class="md-raised" ng-click="goToPage(content._id)">Edit</md-button> </md-card-actions> </md-card> </div>'),a.put("views/editusers.html",'<h1 class="centerText contentHeader">Users</h1> <div class="centerText elementDescription"> This view shows all the users and their information who may add/edit content, or edit the site itself. The first card displayed is the form for creating a new users. Below, is a list of all users for the current site. You may also edit any of the information displayed for the user, as long as current password for the user is provided. </div>  <md-card class="cardForm marginTopBottom"> <md-card-title class="cardTitle centerText"> New User </md-card-title> <md-card-content>   <md-input-container class="cardInputText center"> <input type="text" placeholder="E-mail" ng-model="newUser.email"> </md-input-container>  <md-input-container class="cardInputText center"> <input type="password" placeholder="Password" ng-model="newUser.password"> </md-input-container>  <md-input-container class="cardInputText center"> <input type="password" placeholder="Confirm Password" ng-model="newUser.confirmPassword"> </md-input-container> </md-card-content> <md-card-actions layout="row" layout-align="start center">  <md-card-icon-actions> </md-card-icon-actions> <md-button class="md-raised" ng-click="createUser()">Create</md-button> </md-card-actions> </md-card>  <md-autocomplete class="userSearch" md-search-text="userSearchText" md-items="user in users | filter:userSearchText" md-item-text="user.email" md-min-length="0" placeholder="Search for a user"> <md-item-template> <span md-highlight-text="user.email" md-highlight-flags="^i">{{user.email}}</span> </md-item-template> <md-not-found> No users with the email "{{userSearchText}}" were found. </md-not-found> </md-autocomplete> <div class="center contentContainer"> <md-card class="contentCard" ng-repeat="user in users | filter:userSearchText"> <md-card-title> <md-input-container class="editInput editTitle"> <input class="centerText" type="input" placeholder="E-mail" ng-model="users[$index].email"> </md-input-container> </md-card-title> <md-card-content> <md-input-container class="editInput"> <input class="centerText" type="password" placeholder="Current Password" ng-model="users[$index].currentPassword"> </md-input-container> <md-input-container class="editInput"> <input class="centerText" type="password" placeholder="New Password" ng-model="users[$index].newPassword"> </md-input-container> <md-input-container class="editInput"> <input class="centerText" type="password" placeholder="New Password Confirm" ng-model="users[$index].newPasswordConfirm"> </md-input-container>  <h2 ng-click="showPermissions[user._id] = !showPermissions[user._id]"> <a href=""> User Permissions </a> </h2> <div class="userPermissionsContainer" ng-show="showPermissions[user._id]"> <div class="userPermission"> <h4>Admin</h4> <md-checkbox ng-model="user.permissions.admin" aria-label="Editable Content" class="md-primary"> Is Admin? </md-checkbox> </div> <div class="userPermission"> <h4>Pages</h4> <md-checkbox ng-model="user.permissions.pages.read" aria-label="Editable Content" class="md-primary permissionsCheckBox"> Read </md-checkbox> <md-checkbox ng-model="user.permissions.pages.create" aria-label="Editable Content" class="md-primary permissionsCheckBox" ng-if="user.permissions.pages.read"> Create </md-checkbox> <md-checkbox ng-model="user.permissions.pages.update" aria-label="Editable Content" class="md-primary permissionsCheckBox" ng-if="user.permissions.pages.read"> Update </md-checkbox> <md-checkbox ng-model="user.permissions.pages.delete" aria-label="Editable Content" class="md-primary permissionsCheckBox" ng-if="user.permissions.pages.read"> Delete </md-checkbox> </div> <div class="userPermission"> <h4>Entry Types</h4> <md-checkbox ng-model="user.permissions.entryTypes.read" aria-label="Editable Content" class="md-primary permissionsCheckBox"> Read </md-checkbox> <md-checkbox ng-model="user.permissions.entryTypes.create" aria-label="Editable Content" class="md-primary permissionsCheckBox" ng-if="user.permissions.entryTypes.read"> Create </md-checkbox> <md-checkbox ng-model="user.permissions.entryTypes.update" aria-label="Editable Content" class="md-primary permissionsCheckBox" ng-if="user.permissions.entryTypes.read"> Update </md-checkbox> <md-checkbox ng-model="user.permissions.entryTypes.delete" aria-label="Editable Content" class="md-primary permissionsCheckBox" ng-if="user.permissions.entryTypes.read"> Delete </md-checkbox> </div> <div class="userPermission" ng-if="user.permissions.entryTypes.read"> <h4>Entries</h4> <md-checkbox ng-model="user.permissions.entries.read" aria-label="Editable Content" class="md-primary permissionsCheckBox"> Read </md-checkbox> <md-checkbox ng-model="user.permissions.entries.create" aria-label="Editable Content" class="md-primary permissionsCheckBox" ng-if="user.permissions.entries.read"> Create </md-checkbox> <md-checkbox ng-model="user.permissions.entries.update" aria-label="Editable Content" class="md-primary permissionsCheckBox" ng-if="user.permissions.entries.read"> Update </md-checkbox> <md-checkbox ng-model="user.permissions.entries.delete" aria-label="Editable Content" class="md-primary permissionsCheckBox" ng-if="user.permissions.entries.read"> Delete </md-checkbox> </div> </div> </md-card-content> <md-card-actions layout="row" layout-align="start center">  <md-card-icon-actions> <md-button class="md-raised md-warn" ng-click="deleteUser(user, $index)">Delete</md-button> </md-card-icon-actions> <md-button class="md-raised" ng-click="updateUser(user, $index)">Save</md-button> </md-card-actions> </md-card> </div>'),a.put("views/entryedit.html",'<h1>{{entry.title}}</h1>  <md-input-container class="editInput"> <label>Title</label> <input type="input" ng-model="entry.title"> </md-input-container>  <sayonara-selector selected-items="entry.entryType" options="entryTypes" selector-label="Entry Type"> </sayonara-selector>  <sayonara-selector selected-items="entry.categories" options="categories" selector-label="Categories" multiple-selection="true"> </sayonara-selector>  <md-input-container class="editInput"> <label>Order</label> <input type="number" ng-model="entry.order"> </md-input-container>  <sayonara-content ng-model="entry.content"></sayonara-content>  <div class="centerText"> <md-button class="center md-raised md-primary" ng-disabled="page.title.length < 1" ng-click="saveEntry()">Save Entry</md-button> </div>  <div class="centerText" ng-if="urlId"> <md-button class="center md-raised md-warn" ng-click="deleteEntry()">Delete Entry</md-button> </div>'),a.put("views/login.html",' <div layout="column" class="loginBox md-whiteframe-z1"> <md-toolbar> <h2 class="md-toolbar-tools"><span>Login</span></h2> </md-toolbar> <md-content layout="column" class="md-padding"> <form ng-submit="submitLogin()"> <md-input-container class="authInput"> <label>Email</label> <input type="email" ng-model="email"> </md-input-container> <md-input-container class="authInput"> <label>Password</label> <input type="password" ng-model="password"> </md-input-container> <div layout="row" layout-align="center center" style="padding-top:20px"> <md-button type="submit" class="md-raised md-primary" ng-disabled="$scope.email.length < 1 || $scope.password.length < 1">Login</md-button> <div flex="flex"></div>  </div> </form> </md-content> </div>'),a.put("views/main.html",'<div class="homePageContainer">  <h2>SayonaraJS [Alpha] v0.0.2</h2>  <img class="sayonaraLogo" alt="Sayonara Logo Gif" src="admin/images/sayonaraLogo.gif">  <h4>Please use the navigation to edit your website!</h4> </div>'),a.put("views/pageedit.html",'<h1>{{page.title}}</h1>  <md-input-container class="editInput"> <label>Title</label> <input type="input" ng-model="page.title"> </md-input-container>  <sayonara-selector selected-items="page.entryTypes" options="entryTypes" selector-label="Displayed Entry Types" multiple-selection="true"> </sayonara-selector>  <sayonara-selector selected-items="page.categories" options="categories" selector-label="Categories" multiple-selection="true"> </sayonara-selector>  <md-input-container class="editInput"> <label>Order</label> <input type="number" ng-model="page.order"> </md-input-container>  <sayonara-content ng-model="page.content"></sayonara-content>  <div class="centerText"> <md-button class="center md-raised md-primary" ng-disabled="page.title.length < 1" ng-click="savePage()">Save Page</md-button> </div>  <div class="centerText" ng-if="urlId"> <md-button class="center md-raised md-warn" ng-click="deletePage()">Delete Page</md-button> </div>'),a.put("views/sayonaraconfig.html",'<h1 class="centerText contentHeader">Sayonara Config</h1> <div class="centerText elementDescription"> This view shows the Sayonara Config (sayonaraConfig.js) file found on your Sayonara Server. You may edit the JSON from here if anything needs to be changed, such as Clients, MongoDB ports, etc.. More JSON fields can be added or removed from logging in / ssh\'ing into your server. <b>BEWARE:</b> we highly suggest not removing the default fields on the Sayonara config, as it will definitely break your server. Also, please be careful changing these JSON fields, it could potentially make your site unusable. <b>You need to restart your server to reflect the changes</b>. </div>  <md-card class="cardForm marginTopBottom"> <md-card-title class="cardTitle centerText"> Sayonara Config JSON </md-card-title>  <md-card-content> {  <div ng-repeat="(sayonaraKey, sayonaraValue) in sayonaraConfig" class="jsonForm"> <span class="jsonKey">{{sayonaraKey}}:</span> <md-input-container class="cardInputText jsonValue center"> <input type="text" placeholder="{{sayonaraKey}}" ng-model="sayonaraConfig[sayonaraKey]"> </md-input-container> </div> } </md-card-content> <md-card-actions layout="row" layout-align="start center">  <md-card-icon-actions> </md-card-icon-actions> <md-button class="md-raised" ng-click="updateConfig()">Save</md-button> </md-card-actions> </md-card>'),a.put("views/settings.html",'<h1 class="centerText contentHeader">Settings</h1> <div class="centerText elementDescription"> This view shows all settings for the site itself. You can define and edit Entry Types and Categories that are applied to pages and entries. Click the title "Entry Types" or "Categories" to expand the list of Entry Types or Categories. After expanding the list, you may also create new Entry Types or Catgories. </div>  <h2 class="settingTypeTitle centerText" ng-click="showList.entryTypes = !showList.entryTypes"> <a href="">Entry Types</a> </h2> <div class="centerText" ng-show="showList.entryTypes"> <md-button class="center md-raised md-primary" ng-click="createEntryType()">New Entry Type</md-button> </div> <div class="contentContainer" ng-show="showList.entryTypes"> <md-card class="contentCard" ng-repeat="entryType in entryTypes"> <md-card-title> <md-input-container class="editInput editTitle"> <input class="centerText" type="input" ng-model="entryTypes[$index].title"> </md-input-container> </md-card-title> <md-card-content>  <div> <md-checkbox ng-model="entryType.hasContent" aria-label="Editable Content" class="md-primary"> Editable Content </md-checkbox> </div> <div> <md-checkbox ng-model="entryType.hasEmbedCodes" aria-label="Embed Codes" class="md-primary"> Embed Codes </md-checkbox> </div> <div> <md-checkbox ng-model="entryType.hasUploadUrls" aria-label="Upload Urls" class="md-primary"> Upload Urls </md-checkbox> </div> <div>  <md-input-container class="editInput"> <label>Order</label> <input type="number" ng-model="entryType.order"> </md-input-container> </div> </md-card-content> <md-card-actions layout="row" layout-align="start center">  <md-card-icon-actions> <md-button class="md-raised md-warn" ng-click="deleteEntryType($index)">Delete</md-button> </md-card-icon-actions> <md-button class="md-raised" ng-click="saveEntryType(entryType)">Save</md-button> </md-card-actions> </md-card> </div>  <br ng-show="!showList.entryTypes">  <h2 class="settingTypeTitle centerText" ng-click="showList.categories = !showList.categories"> <a href="">Categories</a> </h2> <div class="centerText" ng-show="showList.categories"> <md-button class="center md-raised md-primary" ng-click="createCategory()">New Category</md-button> </div> <div class="contentContainer" ng-show="showList.categories"> <md-card class="contentCard" ng-repeat="content in categories"> <md-card-title> <md-input-container class="editInput editTitle"> <input class="centerText" type="input" ng-model="categories[$index].title"> </md-input-container> </md-card-title> <md-card-content>  </md-card-content> <md-card-actions layout="row" layout-align="start center">  <md-card-icon-actions> <md-button class="md-raised md-warn" ng-click="deleteCategory($index)">Delete</md-button> </md-card-icon-actions> <md-button class="md-raised" ng-click="saveCategory(content)">Save</md-button> </md-card-actions> </md-card> </div>'),a.put("views/templates/navbar.html",' <md-nav-bar md-selected-nav-item="currentNavItem" nav-bar-aria-label="navigation links">  <md-button class="md-icon-button navMobileButton" aria-label="More" ng-if="isMobile()" ng-click="toggleSideNav()"> <md-icon class="material-icons md-light md-48">more_vert</md-icon> </md-button> <span class="md-headline navLogo">Sayonara Admin</span>  <div ng-if="!isMobile()" class="desktopNavContainer"> <md-nav-item md-nav-href="#/" ng-if="isLoggedIn()" name="home">Home</md-nav-item> <md-nav-item md-nav-href="#/allpages" ng-if="isLoggedIn()" name="pages">Pages</md-nav-item> <md-nav-item md-nav-href="#/allentries" ng-if="isLoggedIn()" name="entries">Entries</md-nav-item> <md-nav-item md-nav-href="#/settings" ng-if="isLoggedIn()" name="settings">Settings</md-nav-item> <md-nav-item md-nav-href="#/admin" ng-if="isLoggedIn()" name="admin">Admin</md-nav-item> <md-nav-item md-nav-click="logout()" ng-if="isLoggedIn()" name="dashboard">Log Out</md-nav-item> </div> </md-nav-bar>  <md-sidenav class="md-sidenav-left navSideBar" md-component-id="left" md-whiteframe="4" ng-if="isMobile()"> <md-toolbar class="md-theme-indigo"> <h1 class="md-toolbar-tools">Navigation</h1> </md-toolbar> <md-content layout-margin> <md-button ng-href="#/" ng-click="toggleSideNav()" ng-if="isLoggedIn()" class="sideNavItem"> Home </md-button> <md-button ng-href="#/about" ng-click="toggleSideNav()" ng-if="isLoggedIn()" class="sideNavItem"> About </md-button> <md-button ng-href="#/allpages" ng-click="toggleSideNav()" ng-if="isLoggedIn()" class="sideNavItem"> Pages </md-button> <md-button ng-href="#/allentries" ng-click="toggleSideNav()" ng-if="isLoggedIn()" class="sideNavItem"> Entries </md-button> <md-button ng-href="#/settings" ng-click="toggleSideNav()" ng-if="isLoggedIn()" class="sideNavItem"> Settings </md-button> <md-button ng-href="#/admin" ng-click="toggleSideNav()" ng-if="isLoggedIn()" class="sideNavItem"> Admin </md-button> <md-button ng-click="toggleSideNav();logout()" ng-if="isLoggedIn()" class="sideNavItem"> Log Out </md-button>  <md-button ng-click="toggleSideNav()" class="md-accent sideNavItem"> Return to Page </md-button> </md-content> </md-sidenav>'),
a.put("views/templates/sayonaracontent.html",'<div class="entryFieldContent"> <h3>Content:</h3>  <md-tabs md-dynamic-height> <md-tab label="Quill WYSIWYG"> <md-content> <ng-quill-editor ng-model="ngModel" placeholder="Enter the content here!" on-editor-created="editorCreated(editor)" on-content-changed="contentChanged(editor, html, text)"> </ng-quill-editor> </md-content> </md-tab> <md-tab label="Markdown (Beta)" ng-click="htmlToMarkdown()"> <md-content class="markdownContainer"> <div class="markdownEditorContainer"> <h4>Markdown Editor:</h4> <md-input-container class="markdownEditorInputContainer"> <ui-codemirror ui-codemirror-opts="codeEditorOptions" ng-model="markdown" ng-change="markdownToHtml()"> </ui-codemirror> </md-input-container> </div> <div class="markdownPreviewContainer"> <h4>Markdown Preview:</h4> <div class="markdownPreview" marked="ngModel"> </div> </div> </md-content> </md-tab> </md-tabs> </div>'),a.put("views/templates/sayonaraselector.html",'<md-input-container class="editSelector"> <label>{{selectorLabel}}</label>   <md-select ng-if="multipleSelection" ng-model="$parent.selectedItems" multiple md-container-class="editSelector"> <md-select-header class="editSelectorHeader"> <input ng-model="selectionSearch" type="search" placeholder="Search for an {{selectorLabel.substring(0,14)}}.." ng-keydown="$event.stopPropagation()" class="editSelectorSearch md-text"> </md-select-header> <md-option ng-repeat="option in options | filter: selectionSearch" ng-value="option._id" ng-click="itemClicked(option)"> {{option.title}} </md-option> </md-select> <md-select ng-if="!multipleSelection" ng-model="$parent.selectedItems" md-container-class="editSelector"> <md-select-header class="editSelectorHeader"> <input ng-model="selectionSearch" type="search" placeholder="Search for an {{selectorLabel.substring(0,14)}}.." ng-keydown="$event.stopPropagation()" class="editSelectorSearch md-text"> </md-select-header> <md-option ng-repeat="option in options | filter: selectionSearch" ng-value="option._id" ng-click="itemClicked(option)"> {{option.title}} </md-option> </md-select> </md-input-container>')}]);